from ROOT import TH3D, TH1D, TFile
from array import array
import copy
from math import *

#binning dictionary: first key = channel name, second key = "x","y", or "z"
BINS_FINE = {
#type-3
't3_muplus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.003801,0.007603,0.011405,0.015206,0.019008,0.022809,0.026610,0.030412,0.034213,0.038015,0.040913,0.043810,0.046707,0.049605,0.052503,0.055400,0.058298,0.061195,0.064093,0.066990,0.070848,0.074707,0.078565,0.082424,0.086282,0.090140,0.093999,0.097857,0.101716,0.105574,0.110017,0.114459,0.118902,0.123344,0.127787,0.132230,0.136672,0.141115,0.145557,0.150000,0.165000,0.180000,0.195000,0.210000,0.225000,0.240000,0.255000,0.270000,0.285000,0.300000]),
'z':array('d',[300.000000,408.801636,459.742767,513.330078,592.586182,1500.000000])},
't3_muminus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.003931,0.007862,0.011793,0.015724,0.019655,0.023586,0.027517,0.031448,0.035379,0.039310,0.042651,0.045991,0.049332,0.052673,0.056013,0.059354,0.062695,0.066036,0.069376,0.072717,0.076237,0.079757,0.083277,0.086797,0.090316,0.093836,0.097356,0.100876,0.104396,0.107916,0.112124,0.116333,0.120541,0.124750,0.128958,0.133166,0.137375,0.141583,0.145792,0.150000,0.165000,0.180000,0.195000,0.210000,0.225000,0.240000,0.255000,0.270000,0.285000,0.300000]),
'z':array('d',[300.000000,408.773010,459.360199,513.037048,591.875244,1500.000000])},
't3_elplus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.004192,0.008385,0.012577,0.016769,0.020962,0.025154,0.029346,0.033538,0.037731,0.041923,0.045303,0.048682,0.052062,0.055442,0.058821,0.062201,0.065581,0.068961,0.072340,0.075720,0.079641,0.083562,0.087484,0.091405,0.095326,0.099247,0.103168,0.107090,0.111011,0.114932,0.118439,0.121946,0.125452,0.128959,0.132466,0.135973,0.139480,0.142986,0.146493,0.150000,0.165000,0.180000,0.195000,0.210000,0.225000,0.240000,0.255000,0.270000,0.285000,0.300000]),
'z':array('d',[300.000000,411.319092,462.293793,516.442749,596.000732,1500.000000])},
't3_elminus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.003837,0.007674,0.011512,0.015349,0.019186,0.023023,0.026860,0.030698,0.034535,0.038372,0.041555,0.044737,0.047920,0.051102,0.054285,0.057468,0.060650,0.063833,0.067015,0.070198,0.073637,0.077075,0.080514,0.083952,0.087391,0.090830,0.094268,0.097707,0.101145,0.104584,0.109126,0.113667,0.118209,0.122750,0.127292,0.131834,0.136375,0.140917,0.145458,0.150000,0.165000,0.180000,0.195000,0.210000,0.225000,0.240000,0.255000,0.270000,0.285000,0.300000]),
'z':array('d',[300.000000,411.105530,461.965729,516.473572,596.381104,1500.000000])},
#type-2 signal region
't2_muplus_SR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.007591,0.015183,0.022774,0.030366,0.037957,0.045548,0.053140,0.060731,0.068323,0.075914,0.082463,0.089012,0.095562,0.102111,0.108660,0.115209,0.121758,0.128308,0.134857,0.141406,0.147265,0.153125,0.158984,0.164844,0.170703,0.176562,0.182422,0.188281,0.194141,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,629.309448,789.854492,2300.000000])},
't2_muminus_SR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.006828,0.013656,0.020484,0.027312,0.034139,0.040967,0.047795,0.054623,0.061451,0.068279,0.073566,0.078853,0.084140,0.089427,0.094715,0.100002,0.105289,0.110576,0.115863,0.121150,0.129035,0.136920,0.144805,0.152690,0.160575,0.168460,0.176345,0.184230,0.192115,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,630.798828,789.880493,2300.000000])},
't2_elplus_SR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.009112,0.018225,0.027338,0.036450,0.045562,0.054675,0.063787,0.072900,0.082012,0.091125,0.098087,0.105048,0.112010,0.118971,0.125933,0.132895,0.139856,0.146818,0.153779,0.160741,0.164667,0.168593,0.172519,0.176445,0.180370,0.184296,0.188222,0.192148,0.196074,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,701.286621,925.089233,2300.000000])},
't2_elminus_SR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.008225,0.016450,0.024675,0.032900,0.041125,0.049349,0.057574,0.065799,0.074024,0.082249,0.089393,0.096538,0.103682,0.110826,0.117970,0.125115,0.132259,0.139403,0.146548,0.153692,0.158323,0.162954,0.167584,0.172215,0.176846,0.181477,0.186108,0.190738,0.195369,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,715.278748,941.490173,2300.000000])},
#type-2 control region
't2_muplus_WJets_CR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.009569,0.019137,0.028706,0.038274,0.047842,0.057411,0.066979,0.076548,0.086117,0.095685,0.101090,0.106495,0.111900,0.117305,0.122709,0.128114,0.133519,0.138924,0.144329,0.149734,0.154761,0.159787,0.164814,0.169840,0.174867,0.179894,0.184920,0.189947,0.194973,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,661.861572,828.673462,2300.000000])},
't2_muminus_WJets_CR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.007511,0.015022,0.022534,0.030045,0.037556,0.045067,0.052578,0.060090,0.067601,0.075112,0.080850,0.086587,0.092325,0.098062,0.103800,0.109538,0.115275,0.121013,0.126750,0.132488,0.139239,0.145990,0.152742,0.159493,0.166244,0.172995,0.179746,0.186498,0.193249,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,661.726074,828.316345,2300.000000])},
't2_elplus_WJets_CR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.009673,0.019345,0.029018,0.038690,0.048363,0.058035,0.067708,0.077380,0.087053,0.096725,0.100750,0.104774,0.108799,0.112823,0.116848,0.120873,0.124897,0.128922,0.132946,0.136971,0.143274,0.149577,0.155880,0.162183,0.168486,0.174788,0.181091,0.187394,0.193697,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,771.098267,1001.391418,2300.000000])},
't2_elminus_WJets_CR':{'x':array('d',[-1.000000,-0.985714,-0.971429,-0.957143,-0.942857,-0.928571,-0.914286,-0.900000,-0.885714,-0.871429,-0.857143,-0.842857,-0.828571,-0.814286,-0.800000,-0.785714,-0.771429,-0.757143,-0.742857,-0.728571,-0.714286,-0.700000,-0.685714,-0.671429,-0.657143,-0.642857,-0.628571,-0.614286,-0.600000,-0.585714,-0.571429,-0.557143,-0.542857,-0.528571,-0.514286,-0.500000,-0.485714,-0.471429,-0.457143,-0.442857,-0.428571,-0.414286,-0.400000,-0.385714,-0.371429,-0.357143,-0.342857,-0.328571,-0.314286,-0.300000,-0.285714,-0.271429,-0.257143,-0.242857,-0.228571,-0.214286,-0.200000,-0.185714,-0.171429,-0.157143,-0.142857,-0.128571,-0.114286,-0.100000,-0.085714,-0.071429,-0.057143,-0.042857,-0.028571,-0.014286,0.000000,0.014286,0.028571,0.042857,0.057143,0.071429,0.085714,0.100000,0.114286,0.128571,0.142857,0.157143,0.171429,0.185714,0.200000,0.214286,0.228571,0.242857,0.257143,0.271429,0.285714,0.300000,0.314286,0.328571,0.342857,0.357143,0.371429,0.385714,0.400000,0.414286,0.428571,0.442857,0.457143,0.471429,0.485714,0.500000,0.514286,0.528571,0.542857,0.557143,0.571429,0.585714,0.600000,0.614286,0.628571,0.642857,0.657143,0.671429,0.685714,0.700000,0.714286,0.728571,0.742857,0.757143,0.771429,0.785714,0.800000,0.814286,0.828571,0.842857,0.857143,0.871429,0.885714,0.900000,0.914286,0.928571,0.942857,0.957143,0.971429,0.985714,1.000000]),
'y':array('d',[0.000000,0.008649,0.017297,0.025946,0.034594,0.043243,0.051892,0.060540,0.069189,0.077837,0.086486,0.093637,0.100788,0.107938,0.115089,0.122240,0.129391,0.136542,0.143692,0.150843,0.157994,0.162195,0.166395,0.170596,0.174796,0.178997,0.183198,0.187398,0.191599,0.195799,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000]),
'z':array('d',[300.000000,763.207520,1008.375122,2300.000000])},
#type-1 signal region
't1_muplus_SR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.012534,0.025067,0.037601,0.050134,0.062668,0.075202,0.087735,0.100269,0.112802,0.125336,0.137802,0.150269,0.162735,0.175202,0.187668,0.200134,0.212601,0.225067,0.237534,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_muminus_SR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.013023,0.026046,0.039070,0.052093,0.065116,0.078139,0.091162,0.104186,0.117209,0.130232,0.142209,0.154186,0.166162,0.178139,0.190116,0.202093,0.214070,0.226046,0.238023,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elplus_SR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.011530,0.023061,0.034591,0.046121,0.057652,0.069182,0.080712,0.092242,0.103773,0.115303,0.128773,0.142242,0.155712,0.169182,0.182652,0.196121,0.209591,0.223061,0.236530,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elminus_SR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.013866,0.027733,0.041599,0.055466,0.069332,0.083198,0.097065,0.110931,0.124798,0.138664,0.149798,0.160931,0.172065,0.183198,0.194332,0.205466,0.216599,0.227733,0.238866,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
#type-1 control region
't1_muplus_WJets_CR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.011874,0.023748,0.035622,0.047496,0.059370,0.071243,0.083117,0.094991,0.106865,0.118739,0.131865,0.144991,0.158117,0.171243,0.184370,0.197496,0.210622,0.223748,0.236874,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_muminus_WJets_CR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.012111,0.024222,0.036334,0.048445,0.060556,0.072667,0.084778,0.096890,0.109001,0.121112,0.134001,0.146890,0.159778,0.172667,0.185556,0.198445,0.211334,0.224222,0.237111,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elplus_WJets_CR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.014116,0.028232,0.042348,0.056464,0.070580,0.084697,0.098813,0.112929,0.127045,0.141161,0.152045,0.162929,0.173813,0.184697,0.195580,0.206464,0.217348,0.228232,0.239116,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elminus_WJets_CR':{'x':array('d',[-1.000000,-0.975000,-0.950000,-0.925000,-0.900000,-0.875000,-0.850000,-0.825000,-0.800000,-0.775000,-0.750000,-0.725000,-0.700000,-0.675000,-0.650000,-0.625000,-0.600000,-0.575000,-0.550000,-0.525000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.525000,0.550000,0.575000,0.600000,0.625000,0.650000,0.675000,0.700000,0.725000,0.750000,0.775000,0.800000,0.825000,0.850000,0.875000,0.900000,0.925000,0.950000,0.975000,1.000000]),
'y':array('d',[0.000000,0.009198,0.018395,0.027593,0.036790,0.045988,0.055186,0.064383,0.073581,0.082778,0.091976,0.107778,0.123581,0.139383,0.155186,0.170988,0.186790,0.202593,0.218395,0.234198,0.250000,0.285000,0.320000,0.355000,0.390000,0.425000,0.460000,0.495000,0.530000,0.565000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
}

BINS_COARSE = {
#type-3
't3_muplus_SR':{'x':array('d',[-1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]),
'y':array('d',[0.000000,0.038015,0.066990,0.105574,0.150000,0.300000]),
'z':array('d',[300.000000,408.801636,459.742767,513.330078,592.586182,1500.000000])},
't3_muminus_SR':{'x':array('d',[-1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]),
'y':array('d',[0.000000,0.039310,0.072717,0.107916,0.150000,0.300000]),
'z':array('d',[300.000000,408.773010,459.360199,513.037048,591.875244,1500.000000])},
't3_elplus_SR':{'x':array('d',[-1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]),
'y':array('d',[0.000000,0.041923,0.075720,0.114932,0.150000,0.300000]),
'z':array('d',[300.000000,411.319092,462.293793,516.442749,596.000732,1500.000000])},
't3_elminus_SR':{'x':array('d',[-1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]),
'y':array('d',[0.000000,0.038372,0.070198,0.104584,0.150000,0.300000]),
'z':array('d',[300.000000,411.105530,461.965729,516.473572,596.381104,1500.000000])},
#type-2 signal region
't2_muplus_SR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.075914,0.141406,0.200000,0.400000]),
'z':array('d',[300.000000,629.309448,789.854492,2300.000000])},
't2_muminus_SR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.068279,0.121150,0.200000,0.400000]),
'z':array('d',[300.000000,630.798828,789.880493,2300.000000])},
't2_elplus_SR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.091125,0.160741,0.200000,0.400000]),
'z':array('d',[300.000000,701.286621,925.089233,2300.000000])},
't2_elminus_SR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.082249,0.153692,0.200000,0.400000]),
'z':array('d',[300.000000,715.278748,941.490173,2300.000000])},
#type-2 control region
't2_muplus_WJets_CR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.095685,0.149734,0.200000,0.400000]),
'z':array('d',[300.000000,661.861572,828.673462,2300.000000])},
't2_muminus_WJets_CR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.075112,0.132488,0.200000,0.400000]),
'z':array('d',[300.000000,661.726074,828.316345,2300.000000])},
't2_elplus_WJets_CR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.096725,0.136971,0.200000,0.400000]),
'z':array('d',[300.000000,771.098267,1001.391418,2300.000000])},
't2_elminus_WJets_CR':{'x':array('d',[-1.0, -0.8571428656578064, -0.7142857313156128, -0.5714285969734192, -0.4285714328289032, -0.2857142984867096, -0.1428571492433548, 0.0, 0.1428571492433548, 0.2857142984867096, 0.4285714328289032, 0.5714285969734192, 0.7142857313156128, 0.8571428656578064, 1.0]),
'y':array('d',[0.000000,0.086486,0.157994,0.200000,0.400000]),
'z':array('d',[300.000000,763.207520,1008.375122,2300.000000])},
#type-1 signal region
't1_muplus_SR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.125336,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_muminus_SR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.130232,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elplus_SR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.115303,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elminus_SR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.138664,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
#type-1 control region
't1_muplus_WJets_CR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.118739,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_muminus_WJets_CR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.121112,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elplus_WJets_CR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.141161,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
't1_elminus_WJets_CR':{'x':array('d',[-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0]),
'y':array('d',[0.000000,0.091976,0.250000,0.600000]),
'z':array('d',[500.000000,3000.000000])},
}

#Template class
class Template(object) :

	def __init__(self,name,formatted_name,modifier,binning='fine') :
		#A Template has a name and a formatted name
		#print '	Adding template with name '+name
		self.__name = name
		self.__type = 'nominal'
		if len(name.split('__'))==3 :
			self.__type = name.split('__')[2]
		self.__formatted_name = formatted_name
		#Templates have modifiers associated with them
		self.__modifier = modifier
		#Dictionary of weightsums for function replacements
		self.__weightsum_dict = {'NQQBAR':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NQ1':{'wname':'wqs1','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NQ2':{'wname':'wqs2','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NGG':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG1':{'wname':'wg1','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG2':{'wname':'wg2','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG3':{'wname':'wg3','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG4':{'wname':'wg4','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NBCK':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NWJETS':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NQCD':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.}}
		#set the binning arrays based on the channel name
		if binning=='fine' :
			self._XBINS = copy.copy(BINS_FINE[self.__name.split('__')[0]]['x'])
			self._YBINS = copy.copy(BINS_FINE[self.__name.split('__')[0]]['y'])
			self._ZBINS = copy.copy(BINS_FINE[self.__name.split('__')[0]]['z'])
		elif binning=='coarse' :
			self._XBINS = copy.copy(BINS_COARSE[self.__name.split('__')[0]]['x'])
			self._YBINS = copy.copy(BINS_COARSE[self.__name.split('__')[0]]['y'])
			self._ZBINS = copy.copy(BINS_COARSE[self.__name.split('__')[0]]['z'])
		else :
			print 'ERROR: cannot determine which binning to use based on binning option %s'%(binning)
			return
		#QCD templates will eventually need a conversion factor
		self.__conversion_factor = None
		#Templates have 3D and 1D projection histograms
		self.__histo_3D = TH3D(name,formatted_name+'; c*; |x_{F}|; M (GeV)',len(self._XBINS)-1,self._XBINS,len(self._YBINS)-1,self._YBINS,len(self._ZBINS)-1,self._ZBINS)
		self.__histo_x  = TH1D(name+'_x',formatted_name+' X Projection; c*',len(self._XBINS)-1,self._XBINS)
		self.__histo_y  = TH1D(name+'_y',formatted_name+' Y Projection; |x_{F}|',len(self._YBINS)-1,self._YBINS)
		self.__histo_z  = TH1D(name+'_z',formatted_name+' Z Projection; M (GeV)',len(self._ZBINS)-1,self._ZBINS)
		#Set the directories of the newly created histograms
		self.__histo_3D.SetDirectory(0); self.__histo_x.SetDirectory(0); self.__histo_y.SetDirectory(0); self.__histo_z.SetDirectory(0)

	#get the event numbers for this process
	def buildWeightsums(self,ttree_dict,branch_dict,const_rw_name_list,ss_rw_name_list,JEC_append,channelcharge,ptfn) :
		#Make a list of weightsum names that we'll be building
		weightsum_names = []
		for name in self.__weightsum_dict :
			if self.__name.find('fqq')!=-1 :
				if name.find('NQ')!=-1 and name!='NQCD' :
					weightsum_names.append(name)
			elif self.__name.find('fgg')!=-1 :
				if name.find('NG')!=-1 :
					weightsum_names.append(name)
			elif self.__name.find('fbck')!=-1 :
				if name.find('NBCK')!=-1 :
					weightsum_names.append(name)
			elif self.__name.find('fwjets')!=-1 :
				if name.find('NWJETS')!=-1 :
					weightsum_names.append(name)
			elif self.__name.find('fqcd')!=-1 :
				if name.find('NQCD')!=-1 :
					weightsum_names.append(name)
		#Make a list of ttree identifiers
		ttree_identifiers = []
		for name in self.__weightsum_dict[weightsum_names[0]] :
			if name!='wname' :
				ttree_identifiers.append(name)
		#open each tree
		for identifier in ttree_identifiers :
			realidentifier = identifier+JEC_append
			filep = TFile(ptfn)
			tree = filep.Get(ttree_dict[realidentifier].GetName())
			#set branch addresses
			for branch in branch_dict.values() :
				tree.SetBranchAddress(branch.getPTreeName(),branch.getPTreeArray())
			#loop over entries
			nEntries = tree.GetEntries()
			for entry in range(nEntries) :
				tree.GetEntry(entry)
				#get event weight
				eweight = self.__get_event_weight__(branch_dict,const_rw_name_list,ss_rw_name_list,(identifier.find('qcd_b')!=-1 or identifier.find('qcd_c')!=-1))
				#for each weightsum we're making, apply the last remaining weight and then increment the value
				for weightsumname in weightsum_names :
					wname = self.__weightsum_dict[weightsumname]['wname']
					if channelcharge==0 :
						if wname==None :
							self.__weightsum_dict[weightsumname][identifier]+=2*eweight
						else :
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname].getPTreeValue()
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname+'_opp'].getPTreeValue()
					else :
						if wname==None :
							self.__weightsum_dict[weightsumname][identifier]+=eweight
						elif branch_dict['lep_Q'].getPTreeValue()==channelcharge :
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname].getPTreeValue()
						elif branch_dict['lep_Q'].getPTreeValue()!=channelcharge :
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname+'_opp'].getPTreeValue()
			filep.Close()

	#get the numbers of events in the regions specified by the keys of the event_numbers dictionary supplied
	def getEventNumbers(self,channelcharge,jecappend,ttree_dict,branch_dict,const_rw_name_list,ss_rw_list,event_numbers,function,fit_par_list,extra_weight,ptfn) :
		#for each region (and tree)
		for ttree_identifier in event_numbers :
			#First replace the total event numbers in the function
			functionstring = self.__replace_function_string__(ttree_identifier,function,fit_par_list)
			#loop over the tree
			realidentifier = ttree_identifier
			if jecappend!=None :
				realidentifier+=jecappend
			filep = TFile(ptfn)
			tree = filep.Get(ttree_dict[realidentifier].GetName())
			for branch in branch_dict.values() :
				tree.SetBranchAddress(branch.getPTreeName(),branch.getPTreeArray())
			nEntries = tree.GetEntries()
			for entry in range(nEntries) :
				#if entry==1 : print 'doing entry %d of %d for template with name %s'%(entry,nEntries,self.getName()) #DEBUG
				tree.GetEntry(entry)
				#get the event weight
				eweight = self.__get_event_weight__(branch_dict,const_rw_name_list,ss_rw_list,(ttree_identifier.find('qcd_b')!=-1 or ttree_identifier.find('qcd_c')!=-1),entry==1)
				eweight_opp = eweight
				#if entry==1 : print '	initial = %.4f'%(eweight) #DEBUG
				#multiply by the function weights if necessary
				if functionstring!=None and functionstring!='' :
					fweight, fweight_opp = self.__get_function_weight__(branch_dict,functionstring)
					eweight*=fweight; eweight_opp*=fweight_opp
				#if entry==1 : print '	after function weight = %.4f'%(eweight) #DEBUG
				#multiply by the last +/-1 factor or whatever
				eweight*=extra_weight; eweight_opp*=extra_weight
				#if entry==1 : print '	after extra weight = %.4f'%(eweight) #DEBUG
				#add to the event numbers
				if channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()==channelcharge:
					event_numbers[ttree_identifier]+=eweight
				if branch_dict['addTwice'].getPTreeValue()==1 and (channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()!=channelcharge) :
					event_numbers[ttree_identifier]+=eweight_opp
				#if entry==1 : print 'for template %s with realidentifier %s eweight for entry %d = %.6f'%(self.getName(),realidentifier,entry,eweight) #DEBUG
			filep.Close()
		return event_numbers

	#add the given tree to the template
	def addTreeToTemplates(self,channelcharge,ttree_identifier,tree,branch_dict,const_rw_name_list,ss_rw_list,function,fit_par_list,extra_weight,ptfn,pb) :
		#replace the total event numbers in the function
		functionstring = self.__replace_function_string__(ttree_identifier,function,fit_par_list)
		filep = TFile(ptfn)
		tree = filep.Get(tree.GetName())
		#loop over the tree
		for branch in branch_dict.values() :
			tree.SetBranchAddress(branch.getPTreeName(),branch.getPTreeArray())
		nEntries = tree.GetEntries()
#		added = 0 #DEBUG
#		n=0 #DEBUG
		for entry in range(nEntries) :
			if pb :
				percentdone = 100.*entry/nEntries
				if percentdone%1.<100./nEntries and percentdone%10.<((100.*(entry-1)/nEntries)%10.) :
					print '		%d%% done'%(percentdone)
#			n+=1 #DEBUG
			tree.GetEntry(entry)
			#get the event weight
			eweight = self.__get_event_weight__(branch_dict,const_rw_name_list,ss_rw_list,(ttree_identifier.find('qcd_b')!=-1 or ttree_identifier.find('qcd_c')!=-1))
#			s = 'event weight = '+str(eweight) #DEBUG
			#multiply by the function weights
			eweight_opp = eweight
			if functionstring!=None and functionstring!='' :
				fweight, fweight_opp = self.__get_function_weight__(branch_dict,functionstring)
				eweight*=fweight; eweight_opp*=fweight_opp
#				s+=', after func. weight = '+str(eweight) #DEBUG
			#if it has a conversion factor, apply it.
			if self.__conversion_factor!=None :
				eweight*=self.__conversion_factor; eweight_opp*=self.__conversion_factor
			#multiply by the last +/-1 factor from the function call
			eweight*=extra_weight; eweight_opp*=extra_weight
#			s+=', after extra weight = '+str(eweight) #DEBUG
			#add to the templates
			x = branch_dict['cstar'].getPTreeValue()
			y = abs(branch_dict['x_F'].getPTreeValue())
			z = branch_dict['M'].getPTreeValue()
			if channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()==channelcharge:
				self.Fill(x,y,z,eweight)
#				added+=eweight #DEBUG
			if branch_dict['addTwice'].getPTreeValue()==1 and (channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()==(-1*channelcharge)) :
				self.Fill(-1.0*x,y,z,eweight_opp)
#				added+=eweight_opp #DEBUG
#			s+=' (weightsum = '+str(added)+', n = '+str(n)+')' #DEBUG
#			print s #DEBUG
#		print 'TEMPLATE '+self.__name+' INTEGRAL = '+str(self.__histo_3D.Integral())+' (total weight added = '+str(added)+')' #DEBUG

	def fixNQCDValues(self) :
		value = self.__histo_3D.Integral()
		print '		Signal region NQCD for template '+self.__name+' = '+str(value)
		return value
	def setNQCDValue(self,value) :
		self.__weightsum_dict['NQCD']['sig']=value

	#Fill the histograms given x, y, and z values
	def Fill(self,x,y,z,w) :
		inxbounds = x>=self._XBINS[0] and x<self._XBINS[len(self._XBINS)-1]
		inybounds = y>=self._YBINS[0] and y<self._YBINS[len(self._YBINS)-1]
		inzbounds = z>=self._ZBINS[0] and z<self._ZBINS[len(self._ZBINS)-1]
		if inxbounds and inybounds and inzbounds :
			self.__histo_3D.Fill(x,y,z,w)
			self.__histo_x.Fill(x,w)
			self.__histo_y.Fill(y,w)
			self.__histo_z.Fill(z,w)

	#convertTo1D takes a 3D distribution and makes it 1D for use with combine
	def convertTo1D(self) :
		nBins = self.__histo_3D.GetNbinsX()*self.__histo_3D.GetNbinsY()*self.__histo_3D.GetNbinsZ()
		newHisto = TH1D(self.__histo_3D.GetName(),self.__histo_3D.GetTitle(),nBins,0.,nBins-1.)
		newHisto.SetDirectory(0)
		realbincounter = 1
		nglobalbins = self.__histo_3D.GetSize()
		for k in range(nglobalbins) :
			if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
				if not self.__histo_3D.GetBinContent(k) < 0. :
					newHisto.SetBinContent(realbincounter,self.__histo_3D.GetBinContent(k))
					if self.__histo_3D.GetBinContent(k)-self.__histo_3D.GetBinError(k)<0. :
						newHisto.SetBinError(realbincounter,self.__histo_3D.GetBinContent(k))
					else :
						newHisto.SetBinError(realbincounter,self.__histo_3D.GetBinError(k))
				realbincounter+=1
		#correct any zero bins not in data 
		if self.__name.find('data_obs')==-1 :
			#get the minimum nonzero value in the histogram
			min_nonzero_value = 1000000.
			for k in range(nglobalbins) :
				if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
					cont = self.__histo_3D.GetBinContent(k)
					if cont > 0. and cont<min_nonzero_value :
						min_nonzero_value = cont
			if min_nonzero_value==1000000. : min_nonzero_value=1.
			#fill zero or less bins with (1/1000)*(minimum nonzero bin content)
			fillervalue = 0.001 * min_nonzero_value
			realbincounter = 1
			for k in range(nglobalbins) :
				if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
					if not self.__histo_3D.GetBinContent(k) > 0. :
						newHisto.SetBinContent(realbincounter,fillervalue)
					realbincounter+=1
		return newHisto

	#make_from_1D_histo takes a 1D distribution and makes a template out of it!
	def make_from_1D_histo(self,histo_1D) :
		nglobalbins = self.__histo_3D.GetSize()
		global1Dbincounter = 1
		for k in range(nglobalbins) :
			if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
				content = histo_1D.GetBinContent(global1Dbincounter)
				error   = histo_1D.GetBinError(global1Dbincounter)
				self.__histo_3D.SetBinContent(k,content)
				self.__histo_3D.SetBinError(k,error)
				binx = array('i',[0]); biny = array('i',[0]); binz = array('i',[0])
				self.__histo_3D.GetBinXYZ(k,binx,biny,binz)
				self.__histo_x.SetBinContent(binx[0],self.__histo_x.GetBinContent(binx[0])+content)
				self.__histo_y.SetBinContent(biny[0],self.__histo_y.GetBinContent(biny[0])+content)
				self.__histo_z.SetBinContent(binz[0],self.__histo_z.GetBinContent(binz[0])+content)
				self.__histo_x.SetBinError(binx[0],self.__histo_x.GetBinError(binx[0])+error*error)
				self.__histo_y.SetBinError(biny[0],self.__histo_y.GetBinError(biny[0])+error*error)
				self.__histo_z.SetBinError(binz[0],self.__histo_z.GetBinError(binz[0])+error*error)
				global1Dbincounter+=1
		hs = [self.__histo_x,self.__histo_y,self.__histo_z]
		for h in hs :
			for k in range(h.GetSize()) :
				if not h.IsBinUnderflow(k) and not h.IsBinOverflow(k) :
					h.SetBinError(k,sqrt(h.GetBinError(k)))

	#Getters/Setters/Adders
	def getName(self) :
		return self.__name
	def getModifier(self) :
		return self.__modifier
	def getWeightsumDict(self) :
		return self.__weightsum_dict
	def setWeightsumDict(self,newdict) :
		self.__weightsum_dict = newdict
	def getType(self) :
		return self.__type
	def setConversionFactor(self,fac) :
		self.__conversion_factor = fac
	def getHisto3D(self) :
		return self.__histo_3D
	def getHistoX(self) :
		return self.__histo_x
	def getHistoY(self) :
		return self.__histo_y
	def getHistoZ(self) :
		return self.__histo_z
	def getHistos(self) :
		return [self.__histo_3D,self.__histo_x,self.__histo_y,self.__histo_z]
	def setHistos(self,hlist) :
		self.__histo_3D = hlist[0]
		self.__histo_x  = hlist[1]
		self.__histo_y  = hlist[2]
		self.__histo_z  = hlist[3]
	#Private methods
	#get the weight for this event based on reweights
	def __get_event_weight__(self,branch_dict,const_rw_name_list,ss_rw_list,skipiso=False,print_ind_weights=False) :
		eweight = 1.0
		mod = self.__modifier
		#constant reweights
		#s = '' #DEBUG
		if const_rw_name_list!=None :
			for constrw in const_rw_name_list :
				eweight*=branch_dict[constrw].getPTreeValue()
		#		s+= 'after const rw'+constrw+' = '+str(eweight)+', ' #DEBUG
		#simple systematics
		if ss_rw_list!=None :
			ss_weights = [1.0,1.0] #BtoF first, then GH
			for ss in ss_rw_list :
			#if isinstance(ss,str) : #DEBUG
			#	print 'ss = %s'%(ss) #DEBUG
				ssname = ss.getName()
				if ssname.find('_iso_weight')!=-1 and skipiso :
					continue
				thisValueBtoF = 1.0; thisValueGH = 1.0
				if mod!=None and mod.isSSModifier() and mod.getName()==ssname :
					if self.__name.endswith('Up') :
						if ss.isSplit() :
							thisValueBtoF=branch_dict[ssname+'_BtoF_up'].getPTreeValue()
							thisValueGH=branch_dict[ssname+'_GH_up'].getPTreeValue()
						else :
							thisValueBtoF = thisValueGH = branch_dict[ssname+'_up'].getPTreeValue()
					elif self.__name.endswith('Down') :
						if ss.isSplit() :
							thisValueBtoF=branch_dict[ssname+'_BtoF_down'].getPTreeValue()
							thisValueGH=branch_dict[ssname+'_GH_down'].getPTreeValue()
						else :
							thisValueBtoF = thisValueGH = branch_dict[ssname+'_down'].getPTreeValue()
				else :
					if ss.isSplit() :
						thisValueBtoF = branch_dict[ssname+'_BtoF'].getPTreeValue()
						thisValueGH   = branch_dict[ssname+'_GH'].getPTreeValue()
					else :
						thisValueBtoF = thisValueGH = branch_dict[ssname].getPTreeValue()
				ss_weights[0]*=thisValueBtoF; ss_weights[1]*=thisValueGH
		#		s+='after sys. %s rw: %s '%(ssname,ss_weights) #DEBUG
			eweight*=ss_weights[0]+ss_weights[1]
		#	s+='after systematics rw = '+str(eweight)+', ' #DEBUG
		#half the weight if we're adding it twice
		if branch_dict['addTwice'].getPTreeValue() == 1 :
			eweight*=0.5
		#s+='final = '+str(eweight) #DEBUG
		#if print_ind_weights : #DEBUG
		#	print s #DEBUG
		return eweight
	#return a new function string with the total event numbers and fit parameters replaced as necessary
	def __replace_function_string__(self,ttree_identifier,function,fit_par_list) :
		#print 'OLD FUNCTION FOR TTREE IDENTIFIER '+ttree_identifier+' AND TEMPLATE '+self.__name+' = '+function.replace(' ','')
		newfunction1 = ''
		fssen = function.split('@')
		ngg = self.__weightsum_dict['NGG'][ttree_identifier]
		nqq = self.__weightsum_dict['NQQBAR'][ttree_identifier]
		nbck = self.__weightsum_dict['NBCK'][ttree_identifier]
		nwjets = self.__weightsum_dict['NWJETS'][ttree_identifier]
		nqcd = self.__weightsum_dict['NQCD'][ttree_identifier]
		others_list = ['NG1','NG2','NG3','NG4','NQ1','NQ2']
		for s in fssen :
			if s == 'NTOT' :
				newfunction1+='('+str(ngg+nqq+nbck+nwjets+nqcd)+')'
			elif s == 'NBCK' :
				newfunction1+='('+str(nbck)+')'
			elif s == 'NWJETS' :
				newfunction1+='('+str(nwjets)+')'
			elif s == 'NTTBAR' :
				newfunction1+='('+str(ngg+nqq)+')'
			elif s == 'NQQBAR' :
				newfunction1+='('+str(nqq)+')'
			elif s == 'NGG' :
				newfunction1+='('+str(ngg)+')'
			elif s == 'NQCD' :
				newfunction1+='('+str(nqcd)+')'
			elif s in others_list :
				newfunction1+='('+str(self.__weightsum_dict[s][ttree_identifier])+')'
			else :
				newfunction1+=s
		newfunction2 = ''
		fssfp = newfunction1.split('#')
		for s in fssfp :
			replaced = False
			for fitpar in fit_par_list :
				if fitpar.getName() == s :
					if self.__type == 'par_'+fitpar.getName()+'Up' :
						newfunction2+='('+str(fitpar.getUpValue())+')'
					elif self.__type == 'par_'+fitpar.getName()+'Down' :
						newfunction2+='('+str(fitpar.getDownValue())+')'
					else :
						newfunction2+='('+str(fitpar.getNomValue())+')'
					replaced = True
					break
			if not replaced :
				newfunction2+=s
		#print 'NEW FUNCTION FOR TTREE IDENTIFIER '+ttree_identifier+' AND TEMPLATE '+self.__name+' = '+newfunction2.replace(' ','') #DEBUG
		return newfunction2
	#return the weight and opposite weight after applying the function reweights
	def __get_function_weight__(self,branch_dict,functionstring) :
		#replace the individual weights in the function string
		newfunction = ''
		newfunction_opp = ''
		fsser = functionstring.split('$')
		for s in fsser :
			if s in branch_dict.keys() :
				newfunction+='('+str(branch_dict[s].getPTreeValue())+')'
				newfunction_opp+='('+str(branch_dict[s+'_opp'].getPTreeValue())+')'
			else :
				newfunction+=s
				newfunction_opp+=s
		#print '	NEW FUNCTION TO EVALUATE = %s'%(newfunction.replace(' ','')) #DEBUG
		#print '	NEW FUNCTION WITH WEIGHTS = '+str(eval(newfunction))+' = '+newfunction.replace(' ','') #DEBUG
		return eval(newfunction), eval(newfunction_opp)

	def __del__(self) :
		pass

	def __str__(self) :
		s = self.__name
		return s