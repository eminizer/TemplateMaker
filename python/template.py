from ROOT import TH3D, TH1D, TFile
from array import array
import copy
from math import *

#binning dictionary: first key = channel name, second key = "x","y", or "z"
BINS_FINE = {
't3_muplus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.002613,0.005227,0.007840,0.010454,0.013067,0.015680,0.018294,0.020907,0.023521,0.026134,0.028217,0.030299,0.032382,0.034464,0.036547,0.038630,0.040712,0.042795,0.044877,0.046960,0.048528,0.050096,0.051664,0.053232,0.054800,0.056367,0.057935,0.059503,0.061071,0.062639,0.064193,0.065748,0.067302,0.068856,0.070410,0.071965,0.073519,0.075073,0.076628,0.078182,0.079989,0.081797,0.083604,0.085412,0.087219,0.089026,0.090834,0.092641,0.094449,0.096256,0.098090,0.099924,0.101759,0.103593,0.105427,0.107261,0.109095,0.110930,0.112764,0.114598,0.116621,0.118644,0.120667,0.122690,0.124714,0.126737,0.128760,0.130783,0.132806,0.134829,0.136831,0.138834,0.140836,0.142839,0.144841,0.146843,0.148846,0.150848,0.152851,0.154853,0.157368,0.159882,0.162397,0.164912,0.167426,0.169941,0.172456,0.174971,0.177485,0.180000,0.222000,0.264000,0.306000,0.348000,0.390000,0.432000,0.474000,0.516000,0.558000,0.600000]),
'z':array('d',[300.000000,307.888947,315.777863,323.666809,331.555725,339.444672,347.333618,355.222534,363.111481,371.000397,378.889343,381.883026,384.876709,387.870422,390.864105,393.857788,396.851471,399.845154,402.838867,405.832550,408.826233,411.427917,414.029602,416.631317,419.233002,421.834686,424.436371,427.038055,429.639771,432.241455,434.843140,437.336212,439.829315,442.322388,444.815491,447.308563,449.801636,452.294739,454.787811,457.280914,459.773987,462.329712,464.885437,467.441193,469.996918,472.552643,475.108368,477.664093,480.219849,482.775574,485.331299,488.138641,490.945984,493.753296,496.560638,499.367981,502.175323,504.982666,507.789978,510.597321,513.404663,516.765381,520.126099,523.486816,526.847534,530.208252,533.568970,536.929688,540.290405,543.651123,547.011841,551.580505,556.149109,560.717773,565.286438,569.855042,574.423706,578.992371,583.561035,588.129639,592.698303,600.538513,608.378784,616.218994,624.059204,631.899414,639.739685,647.579895,655.420105,663.260376,671.100586,803.990540,936.880493,1069.770386,1202.660400,1335.550293,1468.440186,1601.330200,1734.220093,1867.110107,2000.000000])},
't2_muplus_WJets_CR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.006785,0.013570,0.020354,0.027139,0.033924,0.040709,0.047494,0.054278,0.061063,0.067848,0.071820,0.075792,0.079764,0.083736,0.087709,0.091681,0.095653,0.099625,0.103597,0.107569,0.111879,0.116189,0.120499,0.124809,0.129119,0.133429,0.137739,0.142049,0.146359,0.150669,0.155602,0.160535,0.165468,0.170401,0.175334,0.180268,0.185201,0.190134,0.195067,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,330.766418,361.532837,392.299255,423.065674,453.832092,484.598511,515.364929,546.131348,576.897766,607.664185,615.936035,624.207886,632.479797,640.751648,649.023499,657.295349,665.567200,673.839111,682.110962,690.382812,700.234924,710.087036,719.939148,729.791260,739.643372,749.495483,759.347595,769.199707,779.051819,788.903931,804.805420,820.706848,836.608337,852.509766,868.411255,884.312683,900.214172,916.115601,932.017029,947.918518,1153.126709,1358.334839,1563.542969,1768.751099,1973.959229,2179.167480,2384.375488,2589.583740,2794.791748,3000.000000])},
't3_elplus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.002970,0.005940,0.008910,0.011880,0.014850,0.017820,0.020790,0.023760,0.026730,0.029700,0.031577,0.033455,0.035332,0.037210,0.039087,0.040964,0.042842,0.044719,0.046597,0.048474,0.050199,0.051924,0.053650,0.055375,0.057100,0.058825,0.060550,0.062276,0.064001,0.065726,0.067251,0.068776,0.070300,0.071825,0.073350,0.074875,0.076400,0.077924,0.079449,0.080974,0.082468,0.083962,0.085456,0.086950,0.088444,0.089938,0.091432,0.092926,0.094420,0.095914,0.098057,0.100201,0.102344,0.104488,0.106631,0.108774,0.110918,0.113061,0.115205,0.117348,0.119502,0.121656,0.123811,0.125965,0.128119,0.130273,0.132427,0.134582,0.136736,0.138890,0.141258,0.143626,0.145994,0.148362,0.150731,0.153099,0.155467,0.157835,0.160203,0.162571,0.164314,0.166057,0.167800,0.169543,0.171285,0.173028,0.174771,0.176514,0.178257,0.180000,0.222000,0.264000,0.306000,0.348000,0.390000,0.432000,0.474000,0.516000,0.558000,0.600000]),
'z':array('d',[300.000000,308.113770,316.227539,324.341339,332.455109,340.568878,348.682648,356.796417,364.910217,373.023987,381.137756,384.159332,387.180908,390.202454,393.224030,396.245605,399.267181,402.288757,405.310303,408.331879,411.353455,413.942810,416.532166,419.121521,421.710876,424.300232,426.889587,429.478943,432.068298,434.657654,437.247009,439.756561,442.266144,444.775696,447.285278,449.794830,452.304382,454.813965,457.323517,459.833099,462.342651,464.877869,467.413086,469.948334,472.483551,475.018768,477.553986,480.089203,482.624451,485.159668,487.694885,490.577301,493.459717,496.342102,499.224518,502.106934,504.989349,507.871765,510.754150,513.636597,516.518982,519.915283,523.311523,526.707825,530.104126,533.500427,536.896667,540.292969,543.689270,547.085510,550.481812,555.053772,559.625793,564.197754,568.769775,573.341736,577.913696,582.485718,587.057678,591.629700,596.201660,604.097839,611.994019,619.890137,627.786316,635.682495,643.578674,651.474854,659.370972,667.267151,675.163330,807.646973,940.130676,1072.614380,1205.098022,1337.581665,1470.065308,1602.548950,1735.032715,1867.516357,2000.000000])},
't1_elplus_SR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.016107,0.032214,0.048321,0.064428,0.080535,0.096641,0.112748,0.128855,0.144962,0.161069,0.174962,0.188855,0.202748,0.216641,0.230534,0.244428,0.258321,0.272214,0.286107,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,567.671814,635.343628,703.015381,770.687195,838.359009,906.030823,973.702637,1041.374390,1109.046265,1176.718018,1359.046265,1541.374390,1723.702637,1906.030762,2088.359131,2270.687256,2453.015381,2635.343506,2817.671875,3000.000000])},
't1_muplus_WJets_CR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.013996,0.027992,0.041988,0.055984,0.069980,0.083976,0.097972,0.111968,0.125964,0.139960,0.155964,0.171968,0.187972,0.203976,0.219980,0.235984,0.251988,0.267992,0.283996,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,544.143250,588.286499,632.429749,676.572998,720.716187,764.859436,809.002686,853.145935,897.289185,941.432434,1147.289185,1353.145996,1559.002686,1764.859497,1970.716187,2176.572998,2382.429688,2588.286377,2794.143311,3000.000000])},
't2_elminus_WJets_CR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.008548,0.017096,0.025644,0.034192,0.042740,0.051288,0.059836,0.068384,0.076932,0.085480,0.090525,0.095570,0.100614,0.105659,0.110704,0.115749,0.120794,0.125838,0.130883,0.135928,0.138997,0.142065,0.145134,0.148203,0.151272,0.154340,0.157409,0.160478,0.163546,0.166615,0.169953,0.173292,0.176630,0.179969,0.183307,0.186646,0.189985,0.193323,0.196662,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,338.553619,377.107208,415.660828,454.214417,492.768036,531.321655,569.875244,608.428833,646.982483,685.536072,697.743042,709.949951,722.156921,734.363831,746.570801,758.777771,770.984680,783.191650,795.398560,807.605530,822.540466,837.475464,852.410400,867.345398,882.280334,897.215271,912.150269,927.085205,942.020203,956.955139,982.504761,1008.054443,1033.604126,1059.153687,1084.703369,1110.253052,1135.802734,1161.352295,1186.901978,1212.451660,1391.206543,1569.961304,1748.716187,1927.470947,2106.225830,2284.980713,2463.735596,2642.490234,2821.245117,3000.000000])},
't3_elminus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.001777,0.003554,0.005330,0.007107,0.008884,0.010661,0.012438,0.014214,0.015991,0.017768,0.019690,0.021611,0.023533,0.025455,0.027377,0.029298,0.031220,0.033142,0.035063,0.036985,0.038654,0.040322,0.041990,0.043659,0.045327,0.046996,0.048664,0.050333,0.052001,0.053670,0.055323,0.056976,0.058628,0.060281,0.061934,0.063587,0.065240,0.066892,0.068545,0.070198,0.071815,0.073432,0.075049,0.076666,0.078283,0.079900,0.081517,0.083134,0.084751,0.086368,0.088190,0.090011,0.091833,0.093654,0.095476,0.097298,0.099119,0.100941,0.102762,0.104584,0.106963,0.109343,0.111722,0.114101,0.116480,0.118860,0.121239,0.123618,0.125998,0.128377,0.130704,0.133031,0.135358,0.137685,0.140013,0.142340,0.144667,0.146994,0.149321,0.151648,0.154483,0.157318,0.160154,0.162989,0.165824,0.168659,0.171494,0.174330,0.177165,0.180000,0.222000,0.264000,0.306000,0.348000,0.390000,0.432000,0.474000,0.516000,0.558000,0.600000]),
'z':array('d',[300.000000,308.097290,316.194580,324.291840,332.389130,340.486420,348.583710,356.681000,364.778259,372.875549,380.972839,383.988678,387.004517,390.020386,393.036224,396.052063,399.067902,402.083740,405.099609,408.115448,411.131287,413.722076,416.312836,418.903625,421.494385,424.085175,426.675964,429.266724,431.857513,434.448273,437.039062,439.537445,442.035828,444.534210,447.032593,449.530975,452.029358,454.527740,457.026123,459.524506,462.022888,464.614319,467.205780,469.797211,472.388641,474.980072,477.571533,480.162964,482.754395,485.345856,487.937286,490.797150,493.657013,496.516876,499.376740,502.236572,505.096436,507.956299,510.816162,513.676025,516.535889,519.975769,523.415649,526.855530,530.295410,533.735229,537.175110,540.614990,544.054871,547.494751,550.934631,555.497437,560.060303,564.623108,569.185913,573.748718,578.311584,582.874390,587.437195,592.000061,596.562866,604.321716,612.080505,619.839355,627.598145,635.356995,643.115845,650.874634,658.633484,666.392273,674.151123,806.736023,939.320923,1071.905762,1204.490723,1337.075562,1469.660400,1602.245361,1734.830200,1867.415161,2000.000000])},
't3_muminus_SR':{'x':array('d',[-1.000000,-0.990000,-0.980000,-0.970000,-0.960000,-0.950000,-0.940000,-0.930000,-0.920000,-0.910000,-0.900000,-0.890000,-0.880000,-0.870000,-0.860000,-0.850000,-0.840000,-0.830000,-0.820000,-0.810000,-0.800000,-0.790000,-0.780000,-0.770000,-0.760000,-0.750000,-0.740000,-0.730000,-0.720000,-0.710000,-0.700000,-0.690000,-0.680000,-0.670000,-0.660000,-0.650000,-0.640000,-0.630000,-0.620000,-0.610000,-0.600000,-0.590000,-0.580000,-0.570000,-0.560000,-0.550000,-0.540000,-0.530000,-0.520000,-0.510000,-0.500000,-0.490000,-0.480000,-0.470000,-0.460000,-0.450000,-0.440000,-0.430000,-0.420000,-0.410000,-0.400000,-0.390000,-0.380000,-0.370000,-0.360000,-0.350000,-0.340000,-0.330000,-0.320000,-0.310000,-0.300000,-0.290000,-0.280000,-0.270000,-0.260000,-0.250000,-0.240000,-0.230000,-0.220000,-0.210000,-0.200000,-0.190000,-0.180000,-0.170000,-0.160000,-0.150000,-0.140000,-0.130000,-0.120000,-0.110000,-0.100000,-0.090000,-0.080000,-0.070000,-0.060000,-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000,0.110000,0.120000,0.130000,0.140000,0.150000,0.160000,0.170000,0.180000,0.190000,0.200000,0.210000,0.220000,0.230000,0.240000,0.250000,0.260000,0.270000,0.280000,0.290000,0.300000,0.310000,0.320000,0.330000,0.340000,0.350000,0.360000,0.370000,0.380000,0.390000,0.400000,0.410000,0.420000,0.430000,0.440000,0.450000,0.460000,0.470000,0.480000,0.490000,0.500000,0.510000,0.520000,0.530000,0.540000,0.550000,0.560000,0.570000,0.580000,0.590000,0.600000,0.610000,0.620000,0.630000,0.640000,0.650000,0.660000,0.670000,0.680000,0.690000,0.700000,0.710000,0.720000,0.730000,0.740000,0.750000,0.760000,0.770000,0.780000,0.790000,0.800000,0.810000,0.820000,0.830000,0.840000,0.850000,0.860000,0.870000,0.880000,0.890000,0.900000,0.910000,0.920000,0.930000,0.940000,0.950000,0.960000,0.970000,0.980000,0.990000,1.000000]),
'y':array('d',[0.000000,0.002267,0.004534,0.006800,0.009067,0.011334,0.013601,0.015868,0.018134,0.020401,0.022668,0.024332,0.025996,0.027661,0.029325,0.030989,0.032653,0.034317,0.035982,0.037646,0.039310,0.040832,0.042354,0.043875,0.045397,0.046919,0.048441,0.049963,0.051484,0.053006,0.054528,0.056040,0.057551,0.059062,0.060574,0.062086,0.063597,0.065109,0.066620,0.068131,0.069643,0.071034,0.072425,0.073816,0.075207,0.076599,0.077990,0.079381,0.080772,0.082163,0.083554,0.085528,0.087503,0.089477,0.091451,0.093425,0.095400,0.097374,0.099348,0.101323,0.103297,0.105591,0.107885,0.110179,0.112473,0.114767,0.117061,0.119355,0.121649,0.123943,0.126237,0.128530,0.130822,0.133115,0.135407,0.137699,0.139992,0.142284,0.144577,0.146869,0.149162,0.152246,0.155330,0.158413,0.161497,0.164581,0.167665,0.170749,0.173832,0.176916,0.180000,0.222000,0.264000,0.306000,0.348000,0.390000,0.432000,0.474000,0.516000,0.558000,0.600000]),
'z':array('d',[300.000000,307.938934,315.877869,323.816803,331.755737,339.694702,347.633636,355.572571,363.511505,371.450439,379.389374,382.330170,385.270966,388.211761,391.152557,394.093353,397.034149,399.974945,402.915741,405.856537,408.797333,411.414215,414.031097,416.647949,419.264832,421.881714,424.498596,427.115479,429.732330,432.349213,434.966095,437.409607,439.853088,442.296600,444.740082,447.183594,449.627106,452.070587,454.514099,456.957581,459.401093,461.957733,464.514374,467.071014,469.627655,472.184326,474.740967,477.297607,479.854248,482.410889,484.967529,487.782410,490.597290,493.412140,496.227020,499.041901,501.856781,504.671661,507.486511,510.301392,513.116272,516.463867,519.811462,523.159058,526.506653,529.854248,533.201904,536.549500,539.897095,543.244690,546.592285,551.132324,555.672302,560.212341,564.752319,569.292358,573.832397,578.372375,582.912415,587.452393,591.992432,599.802002,607.611511,615.421082,623.230591,631.040161,638.849670,646.659241,654.468750,662.278320,670.087830,803.079041,936.070251,1069.061523,1202.052734,1335.043945,1468.035156,1601.026367,1734.017578,1867.008789,2000.000000])},
't1_elminus_SR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.016236,0.032473,0.048709,0.064946,0.081182,0.097418,0.113655,0.129891,0.146128,0.162364,0.176128,0.189891,0.203655,0.217418,0.231182,0.244946,0.258709,0.272473,0.286236,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,568.020813,636.041626,704.062500,772.083313,840.104126,908.124939,976.145752,1044.166626,1112.187378,1180.208252,1362.187378,1544.166626,1726.145752,1908.125000,2090.104248,2272.083252,2454.062500,2636.041748,2818.020752,3000.000000])},
't2_muminus_WJets_CR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.007511,0.015022,0.022534,0.030045,0.037556,0.045067,0.052578,0.060090,0.067601,0.075112,0.079749,0.084386,0.089023,0.093660,0.098297,0.102935,0.107572,0.112209,0.116846,0.121483,0.125339,0.129196,0.133052,0.136909,0.140765,0.144621,0.148478,0.152334,0.156191,0.160047,0.164042,0.168038,0.172033,0.176028,0.180024,0.184019,0.188014,0.192009,0.196005,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,330.443726,360.887451,391.331207,421.774933,452.218658,482.662384,513.106140,543.549866,573.993591,604.437317,612.962036,621.486755,630.011414,638.536133,647.060852,655.585571,664.110291,672.634949,681.159668,689.684387,699.514404,709.344482,719.174500,729.004517,738.834534,748.664612,758.494629,768.324646,778.154724,787.984741,803.775513,819.566223,835.356995,851.147705,866.938477,882.729248,898.519958,914.310730,930.101440,945.892212,1151.302979,1356.713745,1562.124512,1767.535278,1972.946167,2178.356934,2383.767578,2589.178467,2794.589111,3000.000000])},
't2_elplus_SR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.004722,0.009444,0.014167,0.018889,0.023611,0.028333,0.033055,0.037778,0.042500,0.047222,0.053937,0.060652,0.067367,0.074082,0.080798,0.087513,0.094228,0.100943,0.107658,0.114373,0.119010,0.123647,0.128283,0.132920,0.137557,0.142194,0.146831,0.151467,0.156104,0.160741,0.164667,0.168593,0.172519,0.176445,0.180370,0.184296,0.188222,0.192148,0.196074,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,329.278748,358.557495,387.836273,417.115021,446.393768,475.672516,504.951263,534.230042,563.508789,592.787537,609.004456,625.221375,641.438293,657.655212,673.872131,690.088989,706.305908,722.522827,738.739746,754.956665,767.994263,781.031799,794.069397,807.106934,820.144531,833.182129,846.219666,859.257263,872.294800,885.332397,902.549377,919.766418,936.983398,954.200439,971.417419,988.634399,1005.851440,1023.068420,1040.285400,1057.502441,1251.752197,1446.001953,1640.251709,1834.501465,2028.751221,2223.000977,2417.250732,2611.500488,2805.750244,3000.000000])},
't1_muplus_SR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.013247,0.026493,0.039740,0.052987,0.066234,0.079480,0.092727,0.105974,0.119220,0.132467,0.149220,0.165974,0.182727,0.199480,0.216234,0.232987,0.249740,0.266493,0.283247,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,560.836609,621.673218,682.509766,743.346375,804.182983,865.019592,925.856201,986.692749,1047.529419,1108.365967,1297.529419,1486.692749,1675.856201,1865.019531,2054.183105,2243.346436,2432.509766,2621.673096,2810.836670,3000.000000])},
't2_elminus_SR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.003023,0.006045,0.009068,0.012090,0.015112,0.018135,0.021157,0.024180,0.027203,0.030225,0.035621,0.041016,0.046412,0.051807,0.057203,0.062599,0.067994,0.073390,0.078785,0.084181,0.091132,0.098083,0.105034,0.111985,0.118937,0.125888,0.132839,0.139790,0.146741,0.153692,0.158323,0.162954,0.167584,0.172215,0.176846,0.181477,0.186108,0.190738,0.195369,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,329.131378,358.262756,387.394104,416.525482,445.656860,474.788239,503.919617,533.050964,562.182373,591.313721,608.894531,626.475342,644.056152,661.636963,679.217773,696.798523,714.379333,731.960144,749.540955,767.121765,780.798462,794.475098,808.151794,821.828491,835.505188,849.181824,862.858521,876.535217,890.211853,903.888550,920.387146,936.885742,953.384338,969.882935,986.381531,1002.880127,1019.378723,1035.877319,1052.375977,1068.874512,1261.987061,1455.099609,1648.212158,1841.324707,2034.437256,2227.549805,2420.662354,2613.774902,2806.887451,3000.000000])},
't1_elminus_WJets_CR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.014527,0.029054,0.043580,0.058107,0.072634,0.087161,0.101688,0.116214,0.130741,0.145268,0.160741,0.176214,0.191688,0.207161,0.222634,0.238107,0.253580,0.269054,0.284527,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,556.412903,612.825806,669.238770,725.651672,782.064575,838.477478,894.890381,951.303345,1007.716248,1064.129150,1257.716187,1451.303345,1644.890381,1838.477539,2032.064575,2225.651611,2419.238770,2612.825928,2806.412842,3000.000000])},
't1_elplus_WJets_CR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.014136,0.028272,0.042407,0.056543,0.070679,0.084815,0.098951,0.113086,0.127222,0.141358,0.157222,0.173086,0.188951,0.204815,0.220679,0.236543,0.252407,0.268272,0.284136,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,557.464172,614.928406,672.392578,729.856812,787.320984,844.785156,902.249390,959.713562,1017.177795,1074.641968,1267.177734,1459.713623,1652.249390,1844.785156,2037.321045,2229.856689,2422.392578,2614.928467,2807.464111,3000.000000])},
't2_muminus_SR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.006828,0.013656,0.020484,0.027312,0.034139,0.040967,0.047795,0.054623,0.061451,0.068279,0.073566,0.078853,0.084140,0.089427,0.094715,0.100002,0.105289,0.110576,0.115863,0.121150,0.125726,0.130302,0.134879,0.139455,0.144031,0.148607,0.153183,0.157760,0.162336,0.166912,0.170221,0.173530,0.176838,0.180147,0.183456,0.186765,0.190074,0.193382,0.196691,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,326.629974,353.259949,379.889954,406.519928,433.149902,459.779877,486.409851,513.039856,539.669800,566.299805,575.666809,585.033752,594.400757,603.767761,613.134766,622.501709,631.868713,641.235718,650.602661,659.969666,669.360962,678.752258,688.143555,697.534851,706.926147,716.317383,725.708679,735.099976,744.491272,753.882568,766.741211,779.599915,792.458557,805.317261,818.175903,831.034546,843.893250,856.751892,869.610596,882.469238,1094.222290,1305.975342,1517.728516,1729.481567,1941.234619,2152.987793,2364.740723,2576.493896,2788.246826,3000.000000])},
't1_muminus_SR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.015001,0.030002,0.045003,0.060004,0.075005,0.090005,0.105006,0.120007,0.135008,0.150009,0.165008,0.180007,0.195006,0.210005,0.225004,0.240004,0.255003,0.270002,0.285001,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,560.682922,621.365845,682.048706,742.731628,803.414551,864.097473,924.780396,985.463257,1046.146240,1106.829102,1296.146240,1485.463257,1674.780396,1864.097412,2053.414551,2242.731689,2432.048828,2621.365723,2810.682861,3000.000000])},
't2_muplus_SR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.006944,0.013888,0.020832,0.027776,0.034720,0.041664,0.048608,0.055552,0.062496,0.069440,0.074535,0.079630,0.084724,0.089819,0.094914,0.100009,0.105104,0.110198,0.115293,0.120388,0.123814,0.127240,0.130665,0.134091,0.137517,0.140943,0.144369,0.147794,0.151220,0.154646,0.159181,0.163717,0.168252,0.172788,0.177323,0.181858,0.186394,0.190929,0.195465,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,326.318604,352.637207,378.955811,405.274414,431.593018,457.911621,484.230225,510.548828,536.867432,563.186035,572.749939,582.313843,591.877747,601.441650,611.005493,620.569397,630.133301,639.697205,649.261108,658.825012,668.328064,677.831055,687.334106,696.837097,706.340149,715.843201,725.346191,734.849243,744.352234,753.855286,767.259705,780.664124,794.068542,807.472961,820.877380,834.281738,847.686157,861.090576,874.494995,887.899414,1099.109497,1310.319580,1521.529541,1732.739624,1943.949707,2155.159668,2366.369873,2577.579834,2788.790039,3000.000000])},
't2_elplus_WJets_CR':{'x':array('d',[-1.000000,-0.960000,-0.920000,-0.880000,-0.840000,-0.800000,-0.760000,-0.720000,-0.680000,-0.640000,-0.600000,-0.580000,-0.560000,-0.540000,-0.520000,-0.500000,-0.480000,-0.460000,-0.440000,-0.420000,-0.400000,-0.380000,-0.360000,-0.340000,-0.320000,-0.300000,-0.280000,-0.260000,-0.240000,-0.220000,-0.200000,-0.180000,-0.160000,-0.140000,-0.120000,-0.100000,-0.080000,-0.060000,-0.040000,-0.020000,0.000000,0.020000,0.040000,0.060000,0.080000,0.100000,0.120000,0.140000,0.160000,0.180000,0.200000,0.220000,0.240000,0.260000,0.280000,0.300000,0.320000,0.340000,0.360000,0.380000,0.400000,0.420000,0.440000,0.460000,0.480000,0.500000,0.520000,0.540000,0.560000,0.580000,0.600000,0.640000,0.680000,0.720000,0.760000,0.800000,0.840000,0.880000,0.920000,0.960000,1.000000]),
'y':array('d',[0.000000,0.009673,0.019345,0.029018,0.038690,0.048363,0.058035,0.067708,0.077380,0.087053,0.096725,0.100040,0.103355,0.106669,0.109984,0.113299,0.116614,0.119929,0.123243,0.126558,0.129873,0.133058,0.136242,0.139427,0.142611,0.145796,0.148981,0.152165,0.155350,0.158534,0.161719,0.165547,0.169375,0.173203,0.177031,0.180860,0.184688,0.188516,0.192344,0.196172,0.200000,0.240000,0.280000,0.320000,0.360000,0.400000,0.440000,0.480000,0.520000,0.560000,0.600000]),
'z':array('d',[300.000000,339.264191,378.528381,417.792603,457.056793,496.320984,535.585205,574.849365,614.113586,653.377747,692.641968,705.229065,717.816101,730.403198,742.990295,755.577332,768.164429,780.751526,793.338623,805.925659,818.512756,832.444885,846.377014,860.309143,874.241272,888.173401,902.105530,916.037659,929.969788,943.901917,957.834045,983.086243,1008.338440,1033.590576,1058.842773,1084.094971,1109.347168,1134.599365,1159.851562,1185.103760,1210.355957,1389.320312,1568.284790,1747.249146,1926.213623,2105.177979,2284.142334,2463.106689,2642.071289,2821.035645,3000.000000])},
't1_muminus_WJets_CR':{'x':array('d',[-1.000000,-0.950000,-0.900000,-0.850000,-0.800000,-0.750000,-0.700000,-0.650000,-0.600000,-0.550000,-0.500000,-0.475000,-0.450000,-0.425000,-0.400000,-0.375000,-0.350000,-0.325000,-0.300000,-0.275000,-0.250000,-0.225000,-0.200000,-0.175000,-0.150000,-0.125000,-0.100000,-0.075000,-0.050000,-0.025000,0.000000,0.025000,0.050000,0.075000,0.100000,0.125000,0.150000,0.175000,0.200000,0.225000,0.250000,0.275000,0.300000,0.325000,0.350000,0.375000,0.400000,0.425000,0.450000,0.475000,0.500000,0.550000,0.600000,0.650000,0.700000,0.750000,0.800000,0.850000,0.900000,0.950000,1.000000]),
'y':array('d',[0.000000,0.012111,0.024222,0.036334,0.048445,0.060556,0.072667,0.084778,0.096890,0.109001,0.121112,0.139001,0.156890,0.174778,0.192667,0.210556,0.228445,0.246334,0.264222,0.282111,0.300000,0.330000,0.360000,0.390000,0.420000,0.450000,0.480000,0.510000,0.540000,0.570000,0.600000]),
'z':array('d',[500.000000,544.067810,588.135620,632.203491,676.271301,720.339111,764.406921,808.474731,852.542603,896.610413,940.678223,1146.610352,1352.542603,1558.474731,1764.406982,1970.339111,2176.271240,2382.203369,2588.135742,2794.067871,3000.000000])},
}

BINS_COARSE = {
#type-3
't3_muplus_SR':{'x':array('d',[-1.000000,-0.900000,-0.800000,-0.700000,-0.600000,-0.500000,-0.400000,-0.300000,-0.200000,-0.100000,0.000000,0.100000,0.200000,0.300000,0.400000,0.500000,0.600000,0.700000,0.800000,0.900000,1.000000]),
'y':array('d',[0.000000,0.026134,0.046960,0.062639,0.078182,0.096256,0.114598,0.134829,0.154853,0.180000,0.600000]),
'z':array('d',[300.000000,378.889343,408.826233,434.843140,459.773987,485.331299,513.404663,547.011841,592.698303,671.100586,2000.000000])},
't3_muminus_SR':{'x':array('d',[-1.000000,-0.900000,-0.800000,-0.700000,-0.600000,-0.500000,-0.400000,-0.300000,-0.200000,-0.100000,0.000000,0.100000,0.200000,0.300000,0.400000,0.500000,0.600000,0.700000,0.800000,0.900000,1.000000]),
'y':array('d',[0.000000,0.022668,0.039310,0.054528,0.069643,0.083554,0.103297,0.126237,0.149162,0.180000,0.600000]),
'z':array('d',[300.000000,379.389374,408.797333,434.966095,459.401093,484.967529,513.116272,546.592285,591.992432,670.087830,2000.000000])},
't3_elplus_SR':{'x':array('d',[-1.000000,-0.900000,-0.800000,-0.700000,-0.600000,-0.500000,-0.400000,-0.300000,-0.200000,-0.100000,0.000000,0.100000,0.200000,0.300000,0.400000,0.500000,0.600000,0.700000,0.800000,0.900000,1.000000]),
'y':array('d',[0.000000,0.029700,0.048474,0.065726,0.080974,0.095914,0.117348,0.138890,0.162571,0.180000,0.600000]),
'z':array('d',[300.000000,381.137756,411.353455,437.247009,462.342651,487.694885,516.518982,550.481812,596.201660,675.163330,2000.000000])},
't3_elminus_SR':{'x':array('d',[-1.000000,-0.900000,-0.800000,-0.700000,-0.600000,-0.500000,-0.400000,-0.300000,-0.200000,-0.100000,0.000000,0.100000,0.200000,0.300000,0.400000,0.500000,0.600000,0.700000,0.800000,0.900000,1.000000]),
'y':array('d',[0.000000,0.017768,0.036985,0.053670,0.070198,0.086368,0.104584,0.128377,0.151648,0.180000,0.600000]),
'z':array('d',[300.000000,380.972839,411.131287,437.039062,462.022888,487.937286,516.535889,550.934631,596.562866,674.151123,2000.000000])},
#type-2 signal region
't2_muplus_SR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.069440,0.120388,0.154646,0.200000,0.600000]),
'z':array('d',[300.000000,563.186035,658.825012,753.855286,887.899414,3000.000000])},
't2_muminus_SR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.068279,0.121150,0.166912,0.200000,0.600000]),
'z':array('d',[300.000000,566.299805,659.969666,753.882568,882.469238,3000.000000])},
't2_elplus_SR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.047222,0.114373,0.160741,0.200000,0.600000]),
'z':array('d',[300.000000,592.787537,754.956665,885.332397,1057.502441,3000.000000])},
't2_elminus_SR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.030225,0.084181,0.153692,0.200000,0.600000]),
'z':array('d',[300.000000,591.313721,767.121765,903.888550,1068.874512,3000.000000])},
#type-2 control region
't2_muplus_WJets_CR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.067848,0.107569,0.150669,0.200000,0.600000]),
'z':array('d',[300.000000,607.664185,690.382812,788.903931,947.918518,3000.000000])},
't2_muminus_WJets_CR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.075112,0.121483,0.160047,0.200000,0.600000]),
'z':array('d',[300.000000,604.437317,689.684387,787.984741,945.892212,3000.000000])},
't2_elplus_WJets_CR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.096725,0.129873,0.161719,0.200000,0.600000]),
'z':array('d',[300.000000,692.641968,818.512756,957.834045,1210.355957,3000.000000])},
't2_elminus_WJets_CR':{'x':array('d',[-1.000000,-0.600000,-0.400000,-0.200000,0.000000,0.200000,0.400000,0.600000,1.000000]),
'y':array('d',[0.000000,0.085480,0.135928,0.166615,0.200000,0.600000]),
'z':array('d',[300.000000,685.536072,807.605530,956.955139,1212.451660,3000.000000])},
#type-1 signal region
't1_muplus_SR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.132467,0.300000,0.600000]),
'z':array('d',[500.000000,1108.365967,3000.000000])},
't1_muminus_SR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.150009,0.300000,0.600000]),
'z':array('d',[500.000000,1106.829102,3000.000000])},
't1_elplus_SR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.161069,0.300000,0.600000]),
'z':array('d',[500.000000,1176.718018,3000.000000])},
't1_elminus_SR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.162364,0.300000,0.600000]),
'z':array('d',[500.000000,1180.208252,3000.000000])},
#type-1 control region
't1_muplus_WJets_CR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.139960,0.300000,0.600000]),
'z':array('d',[500.000000,941.432434,3000.000000])},
't1_muminus_WJets_CR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.121112,0.300000,0.600000]),
'z':array('d',[500.000000,940.678223,3000.000000])},
't1_elplus_WJets_CR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.141358,0.300000,0.600000]),
'z':array('d',[500.000000,1074.641968,3000.000000])},
't1_elminus_WJets_CR':{'x':array('d',[-1.000000,-0.500000,-0.250000,0.000000,0.250000,0.500000,1.000000]),
'y':array('d',[0.000000,0.145268,0.300000,0.600000]),
'z':array('d',[500.000000,1064.129150,3000.000000])},
}

#Template class
class Template(object) :

	def __init__(self,name,formatted_name,modifier,binning='fine') :
		#A Template has a name and a formatted name
		#print '	Adding template with name '+name
		self.__name = name
		self.__type = 'nominal'
		if len(name.split('__'))==3 :
			self.__type = name.split('__')[2]
		self.__formatted_name = formatted_name
		#Templates have modifiers associated with them
		self.__modifier = modifier
		#Dictionary of weightsums for function replacements
		self.__weightsum_dict = {'NQQBAR':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NQ1':{'wname':'wqs1','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NQ2':{'wname':'wqs2','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NGG':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG1':{'wname':'wg1','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG2':{'wname':'wg2','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG3':{'wname':'wg3','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NG4':{'wname':'wg4','sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NBCK':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NWJETS':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.},
								 'NQCD':{'wname':None,'sig':0.,'qcd_a':0.,'qcd_b':0.,'qcd_c':0.}}
		#set the binning arrays based on the channel name
		if binning=='fine' :
			self._XBINS = copy.copy(BINS_FINE[self.__name.split('__')[0]]['x'])
			self._YBINS = copy.copy(BINS_FINE[self.__name.split('__')[0]]['y'])
			self._ZBINS = copy.copy(BINS_FINE[self.__name.split('__')[0]]['z'])
		elif binning=='coarse' :
			self._XBINS = copy.copy(BINS_COARSE[self.__name.split('__')[0]]['x'])
			self._YBINS = copy.copy(BINS_COARSE[self.__name.split('__')[0]]['y'])
			self._ZBINS = copy.copy(BINS_COARSE[self.__name.split('__')[0]]['z'])
		else :
			print 'ERROR: cannot determine which binning to use based on binning option %s'%(binning)
			return
		#QCD templates will eventually need a conversion factor
		self.__conversion_factor = None
		#Templates have 3D and 1D projection histograms
		self.__histo_3D = TH3D(name,formatted_name+'; c*; |x_{F}|; M (GeV)',len(self._XBINS)-1,self._XBINS,len(self._YBINS)-1,self._YBINS,len(self._ZBINS)-1,self._ZBINS)
		self.__histo_x  = TH1D(name+'_x',formatted_name+' X Projection; c*',len(self._XBINS)-1,self._XBINS)
		self.__histo_y  = TH1D(name+'_y',formatted_name+' Y Projection; |x_{F}|',len(self._YBINS)-1,self._YBINS)
		self.__histo_z  = TH1D(name+'_z',formatted_name+' Z Projection; M (GeV)',len(self._ZBINS)-1,self._ZBINS)
		#Set the directories of the newly created histograms
		self.__histo_3D.SetDirectory(0); self.__histo_x.SetDirectory(0); self.__histo_y.SetDirectory(0); self.__histo_z.SetDirectory(0)

	#get the event numbers for this process
	def buildWeightsums(self,ttree_dict,branch_dict,const_rw_name_list,ss_rw_name_list,JEC_append,channelcharge,ptfn) :
		#Make a list of weightsum names that we'll be building
		weightsum_names = []
		for name in self.__weightsum_dict :
			if self.__name.find('fqq')!=-1 :
				if name.find('NQ')!=-1 and name!='NQCD' :
					weightsum_names.append(name)
			elif self.__name.find('fgg')!=-1 :
				if name.find('NG')!=-1 :
					weightsum_names.append(name)
			elif self.__name.find('fbck')!=-1 :
				if name.find('NBCK')!=-1 :
					weightsum_names.append(name)
			elif self.__name.find('fwjets')!=-1 :
				if name.find('NWJETS')!=-1 :
					weightsum_names.append(name)
			elif self.__name.find('fqcd')!=-1 :
				if name.find('NQCD')!=-1 :
					weightsum_names.append(name)
		#Make a list of ttree identifiers
		ttree_identifiers = []
		for name in self.__weightsum_dict[weightsum_names[0]] :
			if name!='wname' :
				ttree_identifiers.append(name)
		#open each tree
		for identifier in ttree_identifiers :
			realidentifier = identifier+JEC_append
			filep = TFile(ptfn)
			tree = filep.Get(ttree_dict[realidentifier].GetName())
			#set branch addresses
			for branch in branch_dict.values() :
				tree.SetBranchAddress(branch.getPTreeName(),branch.getPTreeArray())
			#loop over entries
			nEntries = tree.GetEntries()
			for entry in range(nEntries) :
				tree.GetEntry(entry)
				#get event weight
				eweight = self.__get_event_weight__(branch_dict,const_rw_name_list,ss_rw_name_list,(identifier.find('qcd_b')!=-1 or identifier.find('qcd_c')!=-1))
				#for each weightsum we're making, apply the last remaining weight and then increment the value
				for weightsumname in weightsum_names :
					wname = self.__weightsum_dict[weightsumname]['wname']
					if channelcharge==0 :
						if wname==None :
							self.__weightsum_dict[weightsumname][identifier]+=2*eweight
						else :
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname].getPTreeValue()
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname+'_opp'].getPTreeValue()
					else :
						if wname==None :
							self.__weightsum_dict[weightsumname][identifier]+=eweight
						elif branch_dict['lep_Q'].getPTreeValue()==channelcharge :
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname].getPTreeValue()
						elif branch_dict['lep_Q'].getPTreeValue()!=channelcharge :
							self.__weightsum_dict[weightsumname][identifier]+=eweight*branch_dict[wname+'_opp'].getPTreeValue()
			filep.Close()

	#get the numbers of events in the regions specified by the keys of the event_numbers dictionary supplied
	def getEventNumbers(self,channelcharge,jecappend,ttree_dict,branch_dict,const_rw_name_list,ss_rw_list,event_numbers,function,fit_par_list,extra_weight,ptfn) :
		#for each region (and tree)
		for ttree_identifier in event_numbers :
			#First replace the total event numbers in the function
			functionstring = self.__replace_function_string__(ttree_identifier,function,fit_par_list)
			#loop over the tree
			realidentifier = ttree_identifier
			if jecappend!=None :
				realidentifier+=jecappend
			filep = TFile(ptfn)
			tree = filep.Get(ttree_dict[realidentifier].GetName())
			for branch in branch_dict.values() :
				tree.SetBranchAddress(branch.getPTreeName(),branch.getPTreeArray())
			nEntries = tree.GetEntries()
			for entry in range(nEntries) :
				#if entry==1 : print 'doing entry %d of %d for template with name %s'%(entry,nEntries,self.getName()) #DEBUG
				tree.GetEntry(entry)
				#get the event weight
				eweight = self.__get_event_weight__(branch_dict,const_rw_name_list,ss_rw_list,(ttree_identifier.find('qcd_b')!=-1 or ttree_identifier.find('qcd_c')!=-1),entry==1)
				eweight_opp = eweight
				#if entry==1 : print '	initial = %.4f'%(eweight) #DEBUG
				#multiply by the function weights if necessary
				if functionstring!=None and functionstring!='' :
					fweight, fweight_opp = self.__get_function_weight__(branch_dict,functionstring)
					eweight*=fweight; eweight_opp*=fweight_opp
				#if entry==1 : print '	after function weight = %.4f'%(eweight) #DEBUG
				#multiply by the last +/-1 factor or whatever
				eweight*=extra_weight; eweight_opp*=extra_weight
				#if entry==1 : print '	after extra weight = %.4f'%(eweight) #DEBUG
				#add to the event numbers
				if channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()==channelcharge:
					event_numbers[ttree_identifier]+=eweight
				if branch_dict['addTwice'].getPTreeValue()==1 and (channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()!=channelcharge) :
					event_numbers[ttree_identifier]+=eweight_opp
				#if entry==1 : print 'for template %s with realidentifier %s eweight for entry %d = %.6f'%(self.getName(),realidentifier,entry,eweight) #DEBUG
			filep.Close()
		return event_numbers

	#add the given tree to the template
	def addTreeToTemplates(self,channelcharge,ttree_identifier,tree,branch_dict,const_rw_name_list,ss_rw_list,function,fit_par_list,extra_weight,ptfn,pb) :
		#replace the total event numbers in the function
		functionstring = self.__replace_function_string__(ttree_identifier,function,fit_par_list)
		filep = TFile(ptfn)
		tree = filep.Get(tree.GetName())
		#loop over the tree
		for branch in branch_dict.values() :
			tree.SetBranchAddress(branch.getPTreeName(),branch.getPTreeArray())
		nEntries = tree.GetEntries()
#		added = 0 #DEBUG
#		n=0 #DEBUG
		for entry in range(nEntries) :
			if pb :
				percentdone = 100.*entry/nEntries
				if percentdone%1.<100./nEntries and percentdone%10.<((100.*(entry-1)/nEntries)%10.) :
					print '		%d%% done'%(percentdone)
#			n+=1 #DEBUG
			tree.GetEntry(entry)
			#get the event weight
			eweight = self.__get_event_weight__(branch_dict,const_rw_name_list,ss_rw_list,(ttree_identifier.find('qcd_b')!=-1 or ttree_identifier.find('qcd_c')!=-1))
#			s = 'event weight = '+str(eweight) #DEBUG
			#multiply by the function weights
			eweight_opp = eweight
			if functionstring!=None and functionstring!='' :
				fweight, fweight_opp = self.__get_function_weight__(branch_dict,functionstring)
				eweight*=fweight; eweight_opp*=fweight_opp
#				s+=', after func. weight = '+str(eweight) #DEBUG
			#if it has a conversion factor, apply it.
			if self.__conversion_factor!=None :
				eweight*=self.__conversion_factor; eweight_opp*=self.__conversion_factor
			#multiply by the last +/-1 factor from the function call
			eweight*=extra_weight; eweight_opp*=extra_weight
#			s+=', after extra weight = '+str(eweight) #DEBUG
			#add to the templates
			x = branch_dict['cstar'].getPTreeValue()
			y = abs(branch_dict['x_F'].getPTreeValue())
			z = branch_dict['M'].getPTreeValue()
			if channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()==channelcharge:
				self.Fill(x,y,z,eweight)
#				added+=eweight #DEBUG
			if branch_dict['addTwice'].getPTreeValue()==1 and (channelcharge==0 or branch_dict['lep_Q'].getPTreeValue()==(-1*channelcharge)) :
				self.Fill(-1.0*x,y,z,eweight_opp)
#				added+=eweight_opp #DEBUG
#			s+=' (weightsum = '+str(added)+', n = '+str(n)+')' #DEBUG
#			print s #DEBUG
#		print 'TEMPLATE '+self.__name+' INTEGRAL = '+str(self.__histo_3D.Integral())+' (total weight added = '+str(added)+')' #DEBUG

	def fixNQCDValues(self) :
		value = self.__histo_3D.Integral()
		print '		Signal region NQCD for template '+self.__name+' = '+str(value)
		return value
	def setNQCDValue(self,value) :
		self.__weightsum_dict['NQCD']['sig']=value

	#Fill the histograms given x, y, and z values
	def Fill(self,x,y,z,w) :
		inxbounds = x>=self._XBINS[0] and x<self._XBINS[len(self._XBINS)-1]
		inybounds = y>=self._YBINS[0] and y<self._YBINS[len(self._YBINS)-1]
		inzbounds = z>=self._ZBINS[0] and z<self._ZBINS[len(self._ZBINS)-1]
		if inxbounds and inybounds and inzbounds :
			self.__histo_3D.Fill(x,y,z,w)
			self.__histo_x.Fill(x,w)
			self.__histo_y.Fill(y,w)
			self.__histo_z.Fill(z,w)

	#convertTo1D takes a 3D distribution and makes it 1D for use with combine
	def convertTo1D(self,bins_to_zero=None,nom_1D_histo=None) :
		nBins = self.__histo_3D.GetNbinsX()*self.__histo_3D.GetNbinsY()*self.__histo_3D.GetNbinsZ()
		newHisto = TH1D(self.__histo_3D.GetName(),self.__histo_3D.GetTitle(),nBins,0.,nBins-1.)
		newHisto.SetDirectory(0)
		realbincounter = 1
		nglobalbins = self.__histo_3D.GetSize()
		for k in range(nglobalbins) :
			if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
				if not self.__histo_3D.GetBinContent(k) < 0. :
					newHisto.SetBinContent(realbincounter,self.__histo_3D.GetBinContent(k))
					if self.__histo_3D.GetBinContent(k)-self.__histo_3D.GetBinError(k)<0. :
						newHisto.SetBinError(realbincounter,self.__histo_3D.GetBinContent(k))
					else :
						newHisto.SetBinError(realbincounter,self.__histo_3D.GetBinError(k))
				realbincounter+=1
		#correct any zero bins not in data
		zeroed_bins = []
		#if self.__name.find('data_obs')==-1 :
		#	#fill zero or less bins with a very small value
		#	fillervalue = 0.00010
		#	if self.__type.endswith('Up') : 
		#		fillervalue = 0.0001005
		#	elif self.__type.endswith('Down') :
		#		fillervalue=0.0000995
		#	realbincounter = 1
		#	for k in range(nglobalbins) :
		#		if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
		#			if (bins_to_zero!=None and realbincounter in bins_to_zero) and not self.__modifier.getName()=='top_pt_re_weight' :
		#				newHisto.SetBinContent(realbincounter,fillervalue)
		#				zeroed_bins.append(realbincounter)
		#			elif not self.__histo_3D.GetBinContent(k) > 0. :
		#				newbincont = fillervalue
		#				if nom_1D_histo!=None :
		#					newbincont = nom_1D_histo.GetBinContent(realbincounter)
		#					if self.__type.endswith('Up') : 
		#						newbincont*=(1.005)
		#					elif self.__type.endswith('Down') :
		#						newbincont*=(0.995)
		#				newHisto.SetBinContent(realbincounter,newbincont)
		#				zeroed_bins.append(realbincounter)
		#			realbincounter+=1
		return newHisto,zeroed_bins

	#make_from_1D_histo takes a 1D distribution and makes a template out of it!
	def make_from_1D_histo(self,histo_1D) :
		nglobalbins = self.__histo_3D.GetSize()
		global1Dbincounter = 1
		for k in range(nglobalbins) :
			if not self.__histo_3D.IsBinOverflow(k) and not self.__histo_3D.IsBinUnderflow(k) :
				content = histo_1D.GetBinContent(global1Dbincounter)
				error   = histo_1D.GetBinError(global1Dbincounter)
				self.__histo_3D.SetBinContent(k,content)
				self.__histo_3D.SetBinError(k,error)
				binx = array('i',[0]); biny = array('i',[0]); binz = array('i',[0])
				self.__histo_3D.GetBinXYZ(k,binx,biny,binz)
				self.__histo_x.SetBinContent(binx[0],self.__histo_x.GetBinContent(binx[0])+content)
				self.__histo_y.SetBinContent(biny[0],self.__histo_y.GetBinContent(biny[0])+content)
				self.__histo_z.SetBinContent(binz[0],self.__histo_z.GetBinContent(binz[0])+content)
				self.__histo_x.SetBinError(binx[0],self.__histo_x.GetBinError(binx[0])+error*error)
				self.__histo_y.SetBinError(biny[0],self.__histo_y.GetBinError(biny[0])+error*error)
				self.__histo_z.SetBinError(binz[0],self.__histo_z.GetBinError(binz[0])+error*error)
				global1Dbincounter+=1
		hs = [self.__histo_x,self.__histo_y,self.__histo_z]
		for h in hs :
			for k in range(h.GetSize()) :
				if not h.IsBinUnderflow(k) and not h.IsBinOverflow(k) :
					h.SetBinError(k,sqrt(h.GetBinError(k)))

	#Getters/Setters/Adders
	def getName(self) :
		return self.__name
	def getModifier(self) :
		return self.__modifier
	def getWeightsumDict(self) :
		return self.__weightsum_dict
	def setWeightsumDict(self,newdict) :
		self.__weightsum_dict = newdict
	def getType(self) :
		return self.__type
	def setConversionFactor(self,fac) :
		self.__conversion_factor = fac
	def getHisto3D(self) :
		return self.__histo_3D
	def getHistoX(self) :
		return self.__histo_x
	def getHistoY(self) :
		return self.__histo_y
	def getHistoZ(self) :
		return self.__histo_z
	def getHistos(self) :
		return [self.__histo_3D,self.__histo_x,self.__histo_y,self.__histo_z]
	def setHistos(self,hlist) :
		self.__histo_3D = hlist[0]
		self.__histo_x  = hlist[1]
		self.__histo_y  = hlist[2]
		self.__histo_z  = hlist[3]
	#Private methods
	#get the weight for this event based on reweights
	def __get_event_weight__(self,branch_dict,const_rw_name_list,ss_rw_list,skipiso=False,print_ind_weights=False) :
		eweight = 1.0
		mod = self.__modifier
		#constant reweights
		#s = '' #DEBUG
		if const_rw_name_list!=None :
			for constrw in const_rw_name_list :
				eweight*=branch_dict[constrw].getPTreeValue()
		#		s+= 'after const rw'+constrw+' = '+str(eweight)+', ' #DEBUG
		#simple systematics
		if ss_rw_list!=None :
			ss_weights = [1.0,1.0] #BtoF first, then GH
			for ss in ss_rw_list :
			#if isinstance(ss,str) : #DEBUG
			#	print 'ss = %s'%(ss) #DEBUG
				ssname = ss.getName()
				if ssname.find('_iso_weight')!=-1 and skipiso :
					continue
				thisValueBtoF = 1.0; thisValueGH = 1.0
				if mod!=None and mod.isSSModifier() and mod.getName()==ssname :
					if self.__name.endswith('Up') :
						if ss.isSplit() :
							thisValueBtoF=branch_dict[ssname+'_BtoF_up'].getPTreeValue()
							thisValueGH=branch_dict[ssname+'_GH_up'].getPTreeValue()
						else :
							thisValueBtoF = thisValueGH = branch_dict[ssname+'_up'].getPTreeValue()
					elif self.__name.endswith('Down') :
						if ss.isSplit() :
							thisValueBtoF=branch_dict[ssname+'_BtoF_down'].getPTreeValue()
							thisValueGH=branch_dict[ssname+'_GH_down'].getPTreeValue()
						else :
							thisValueBtoF = thisValueGH = branch_dict[ssname+'_down'].getPTreeValue()
				else :
					if ss.isSplit() :
						thisValueBtoF = branch_dict[ssname+'_BtoF'].getPTreeValue()
						thisValueGH   = branch_dict[ssname+'_GH'].getPTreeValue()
					else :
						thisValueBtoF = thisValueGH = branch_dict[ssname].getPTreeValue()
				ss_weights[0]*=thisValueBtoF; ss_weights[1]*=thisValueGH
		#		s+='after sys. %s rw: %s '%(ssname,ss_weights) #DEBUG
			eweight*=ss_weights[0]+ss_weights[1]
		#	s+='after systematics rw = '+str(eweight)+', ' #DEBUG
		#half the weight if we're adding it twice
		if branch_dict['addTwice'].getPTreeValue() == 1 :
			eweight*=0.5
		#s+='final = '+str(eweight) #DEBUG
		#if print_ind_weights : #DEBUG
		#	print s #DEBUG
		return eweight
	#return a new function string with the total event numbers and fit parameters replaced as necessary
	def __replace_function_string__(self,ttree_identifier,function,fit_par_list) :
		#print 'OLD FUNCTION FOR TTREE IDENTIFIER '+ttree_identifier+' AND TEMPLATE '+self.__name+' = '+function.replace(' ','')
		newfunction1 = ''
		fssen = function.split('@')
		ngg = self.__weightsum_dict['NGG'][ttree_identifier]
		nqq = self.__weightsum_dict['NQQBAR'][ttree_identifier]
		nbck = self.__weightsum_dict['NBCK'][ttree_identifier]
		nwjets = self.__weightsum_dict['NWJETS'][ttree_identifier]
		nqcd = self.__weightsum_dict['NQCD'][ttree_identifier]
		others_list = ['NG1','NG2','NG3','NG4','NQ1','NQ2']
		for s in fssen :
			if s == 'NTOT' :
				newfunction1+='('+str(ngg+nqq+nbck+nwjets+nqcd)+')'
			elif s == 'NBCK' :
				newfunction1+='('+str(nbck)+')'
			elif s == 'NWJETS' :
				newfunction1+='('+str(nwjets)+')'
			elif s == 'NTTBAR' :
				newfunction1+='('+str(ngg+nqq)+')'
			elif s == 'NQQBAR' :
				newfunction1+='('+str(nqq)+')'
			elif s == 'NGG' :
				newfunction1+='('+str(ngg)+')'
			elif s == 'NQCD' :
				newfunction1+='('+str(nqcd)+')'
			elif s in others_list :
				newfunction1+='('+str(self.__weightsum_dict[s][ttree_identifier])+')'
			else :
				newfunction1+=s
		newfunction2 = ''
		fssfp = newfunction1.split('#')
		for s in fssfp :
			replaced = False
			for fitpar in fit_par_list :
				if fitpar.getName() == s :
					if self.__type == 'par_'+fitpar.getName()+'Up' :
						newfunction2+='('+str(fitpar.getUpValue())+')'
					elif self.__type == 'par_'+fitpar.getName()+'Down' :
						newfunction2+='('+str(fitpar.getDownValue())+')'
					else :
						newfunction2+='('+str(fitpar.getNomValue())+')'
					replaced = True
					break
			if not replaced :
				newfunction2+=s
		#print 'NEW FUNCTION FOR TTREE IDENTIFIER '+ttree_identifier+' AND TEMPLATE '+self.__name+' = '+newfunction2.replace(' ','') #DEBUG
		return newfunction2
	#return the weight and opposite weight after applying the function reweights
	def __get_function_weight__(self,branch_dict,functionstring) :
		#replace the individual weights in the function string
		newfunction = ''
		newfunction_opp = ''
		fsser = functionstring.split('$')
		for s in fsser :
			if s in branch_dict.keys() :
				newfunction+='('+str(branch_dict[s].getPTreeValue())+')'
				newfunction_opp+='('+str(branch_dict[s+'_opp'].getPTreeValue())+')'
			else :
				newfunction+=s
				newfunction_opp+=s
		#print '	NEW FUNCTION TO EVALUATE = %s'%(newfunction.replace(' ','')) #DEBUG
		#print '	NEW FUNCTION WITH WEIGHTS = '+str(eval(newfunction))+' = '+newfunction.replace(' ','') #DEBUG
		return eval(newfunction), eval(newfunction_opp)

	def __del__(self) :
		pass

	def __str__(self) :
		s = self.__name
		return s